#!/usr/bin/env bash
# @file        pinfo
# @version     0.1.0
# @brief       Status printer script.
# @author      Alexandre Martos
# @email       contact@amartos.fr
# @copyright   2022-2023 Alexandre Martos <contact@amartos.fr>
# @license     MIT License
#
# @parblock
# This script prints given status messages and returns a status code
# depending on it (1 for errors, otherwise 0).
#
# It uses ANSI codes for colors.
#
# The script takes at least two arguments, a keyword among
# {error,fail,ok,pass,info,debug} (error and fail will make the script
# return a status code of 1), and a short message. It can take third
# or more arguments, in which case the second is the title and the
# remaining ones are the message.
#
# Use the option -h/--help for more details.
# @endparblock

shopt -s extglob

# @var ERROR
# @since 0.1.0
# @brief Error keywords.
ERROR="@(error|fail)"

# @var SUCCESS
# @since 0.1.0
# @brief Success keywords.
SUCCESS="@(ok|pass)"

# @var INFO
# @since 0.1.0
# @brief Information keywords.
INFO="@(info|debug)"

# @var KEYWORDS
# @since 0.1.0
# @brief Full list of keywords.
KEYWORDS="${ERROR:2:-1}|${SUCCESS:2:-1}|${INFO:2:-1}"

# @var EXCODE
# @since 0.1.0
# @brief Store the exit code.
EXCODE=0

# @var MAX
# @since 0.1.0
# @brief Max size for the status label.
MAX=6

# @brief Print the script help and exit.
# @since 0.1.0
# @param $1 The exit status code.
function usage {
    echo -e "usage: pinfo [-h,--help] STATUS SHORT [DESC]\n\n"\
         "STATUS\tA status keyword among [$KEYWORDS].\n" \
         "SHORT\tA short description/title.\n" \
         "DESC\tLong description.\n" \
         "\nOPTIONS:\n" \
         "-h,--help\tPrint this help and exit.\n"
    exit $1
}

# @brief Check the command line arguments arguments.
# @since 0.1.0
# @param $@ The command line arguments.
function check_args {
    [ -z "$1" ] && >&2 echo "STATUS cannot be emtpy" && return 1
    echo "$KEYWORDS" | grep -q "$1" || return $(>&2 echo "unkown keyword: $1" && return 1)
    [ -z "$2" ] && >&2 echo "SHORT cannot be empty" && return 1
    return 0
}

# @brief Center a string.
# @since 0.1.0
# @param $1 The string to center.
# @param $2 The final string max length.
# @param $3 The padding character.
# @see https://unix.stackexchange.com/a/267730
function center {
    local SIZE=${#1}
    local NPAD=$(($2-$SIZE))
    local LEFT=$(($NPAD / 2))
    local RIGHT=$((($NPAD / 2) + ($NPAD % 2))) # align to left if odd
    [ -z "$3" ] && local CPAD=" " || local CPAD="$3"
    printf "%*s%s%*s" $LEFT "$CPAD" $1 $RIGHT "$CPAD"
}

# @brief Print an uppercased string.
# @since 0.1.0
# @param $1 The string to print.
function upper {
    echo $(echo $1 | tr "[:lower:]" "[:upper:]")
}

# @brief Print a colored status label.
# @since 0.1.0
# @param $1 The status keyword; must be listed in #KEYWORDS.
function status {
    local STATUS="info"
    local CODE=7
    case $1 in
        $ERROR) CODE=1; EXCODE=1;; # red
        $SUCCESS) CODE=2;;         # green
        $INFO) CODE=6;;            # cyan
        *);;
    esac
    STATUS="$(upper $1)"
    printf "[ \e[0;1;3%im%-*s\e[0m]" $CODE $MAX $STATUS
}

# @brief Print a status message.
# @since 0.1.0
# @param $1 A keyword listed in #KEYWORDS.
# @param $2 The message title or short description.
# @param $3 (optional) The message long description.
function pstatus {
    status $1
    printf " %s" "$2"
    [ ! -z "$3" ] && echo : ${@:3} || echo ""
}

# @brief Main function.
# @since 0.1.0
# @param $@ Command line arguments.
function main {
    case $1 in
        -h|--help) usage 0;;
        *) check_args "$@" || >&2 usage 1;;
    esac
    pstatus $@ && exit $EXCODE
}

main "$@"
