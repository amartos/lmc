#!/usr/bin/env bash
# @file        pinfo
# @version     0.1.0
# @brief       Script d'affichage de messages de status.
# @date        2022
# @author      Alexandre Martos
# @copyright   MIT License
#
# @parblock
# Ce script affiche un message de status qui lui a été confié et
# renvoie un code dépendant du status (1 pour une erreur, 0 sinon).
#
# Le script utilise des couleurs avec les codes ANSI.
#
# L'aide du script est disponible avec l'option -h/--help
# @endparblock

# @var ERROR
# @since 0.1.0
# @brief Liste des mots-clés d'erreurs.
ERROR="error|fail"

# @var SUCCESS
# @since 0.1.0
# @brief Liste des mots-clés de succès.
SUCCESS="ok|pass"

# @var INFO
# @since 0.1.0
# @brief Liste des mots-clés d'information.
INFO="info|debug"

# @var KEYWORDS
# @since 0.1.0
# @brief Liste des mots-clés du script.
KEYWORDS="$ERROR|$SUCCESS|$INFO"

# @var EXCODE
# @since 0.1.0
# @brief Code de status du script par défaut.
EXCODE=0

# @var MAX
# @since 0.1.0
# @brief Taille maximale de l'indicateur de status.
MAX=6

# @brief Affiche le message d'aide du script puis quitte.
# @since 0.1.0
# @param $1 Le code de status.
function usage {
    echo -e "usage: pinfo [-h,--help] status short [desc]\n\n"\
         "status\ta status keyword among [$KEYWORDS]\n" \
         "short\ta short description of the status\n" \
         "desc\tan optional long description of the status\n" \
         "\nOPTIONS:\n" \
         "-h,--help\tprint this help and exit\n"
    exit $1
}

# @brief Vérifie les arguments donnés au script.
# @since 0.1.0
# @param $@ Les arguments donnés au script.
function check_args {
    [ -z "$1" ] && >&2 echo "status cannot be emtpy" && return 1
    echo "$KEYWORDS" | grep -q "$1" || return $(>&2 echo "unkown keyword: $1" && return 1)
    [ -z "$2" ] && >&2 echo "short cannot be empty" && return 1
    return 0
}

# @brief Centre une chaîne de caractère en ajoutant un caractère autour
# de la chaîne.
# @since 0.1.0
# @param $1 La chaîne à centrer.
# @param $2 La longueur totale maximale de la chaîne finale.
# @param $3 Caractère utilisé pour centrer (espace par défaut).
# @print La chaîne centrée avec #$3 jusqu'à atteindre #$2 caractères.
# @exit Si la longueur totale demandée est inférieure à celle de la
# chaîne de départ.
# @see https://unix.stackexchange.com/a/267730
function center {
    local SIZE=${#1}
    local NPAD=$(($2-$SIZE))
    local LEFT=$(($NPAD / 2))
    local RIGHT=$((($NPAD / 2) + ($NPAD % 2))) # align to left if odd
    [ -z "$3" ] && local CPAD=" " || local CPAD="$3"
    printf "%*s%s%*s" $LEFT "$CPAD" $1 $RIGHT "$CPAD"
}

# @brief Convertit la chaîne en majuscules.
# @since 0.1.0
# @param $1 Chaîne à convertir.
# @print La chaîne en majuscules.
function upper {
    echo $(echo $1 | tr "[:lower:]" "[:upper:]")
}

# @brief Affiche un indicateur coloré de status.
# @since 0.1.0
# @param $1 Le mot-clé de status parmi $KEYWORDS.
# @print L'indicateur de status coloré correspondant au mot-clé.
function status {
    local STATUS="info"
    local CODE=7
    eval "case $1 in
        $ERROR)
            CODE=1
            EXCODE=1;;
        $SUCCESS) CODE=2;;
        $INFO) CODE=6;;
        *);;
    esac"
    STATUS="$(upper $1)"
    printf "[ \e[0;1;3%im%-*s\e[0m]" $CODE $MAX $STATUS
}

# @brief Affiche un message de status.
# @since 0.1.0
# @param $1 Un mot-clé de status parmi $KEYWORDS.
# @param $2 Une description courte du message.
# @param $3 Une description longue du message.
function pstatus {
    status $1
    printf " %s" "$2"
    [ ! -z "$3" ] && echo : ${@:3} || echo ""
}

# @brief main du script
# @since 0.1.0
# @param $@ arguments de la ligne de commande.
# @exit 1 en cas d'erreur, sinon 0.
function main {
    case $1 in
        -h|--help) usage 0;;
        *) check_args "$@" || >&2 usage 1;;
    esac
    pstatus $@ && exit $EXCODE
}

main $@
